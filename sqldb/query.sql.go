// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: query.sql

package db

import (
	"context"
	"database/sql"
)

const createAccount = `-- name: CreateAccount :execresult
INSERT INTO accounts (
    user_id, balance
) VALUES (
    ?,?
)
`

type CreateAccountParams struct {
	UserID  sql.NullInt32
	Balance sql.NullInt64
}

func (q *Queries) CreateAccount(ctx context.Context, arg CreateAccountParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createAccount, arg.UserID, arg.Balance)
}

const createTransactionHistory = `-- name: CreateTransactionHistory :execresult
INSERT INTO transaction_history (
    transaction_type, amount, user_id, account_id, timestamp, created_at, updated_at
) VALUES (
    ?,?,?,?,?,?,?
)
`

type CreateTransactionHistoryParams struct {
	TransactionType sql.NullString
	Amount          sql.NullInt64
	UserID          sql.NullInt32
	AccountID       sql.NullInt32
	Timestamp       sql.NullTime
	CreatedAt       sql.NullTime
	UpdatedAt       sql.NullTime
}

func (q *Queries) CreateTransactionHistory(ctx context.Context, arg CreateTransactionHistoryParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createTransactionHistory,
		arg.TransactionType,
		arg.Amount,
		arg.UserID,
		arg.AccountID,
		arg.Timestamp,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
}

const createUser = `-- name: CreateUser :execresult
INSERT INTO users (
    name, email, password, status, created_at, updated_at
) VALUES (
    ?,?,?,?,?,?
)
`

type CreateUserParams struct {
	Name      sql.NullString
	Email     sql.NullString
	Password  sql.NullString
	Status    sql.NullString
	CreatedAt sql.NullTime
	UpdatedAt sql.NullTime
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createUser,
		arg.Name,
		arg.Email,
		arg.Password,
		arg.Status,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
}

const getAccount = `-- name: GetAccount :one
SELECT id, user_id, balance, created_at, updated_at FROM accounts
WHERE id = ? LIMIT 1
`

func (q *Queries) GetAccount(ctx context.Context, id int32) (Account, error) {
	row := q.db.QueryRowContext(ctx, getAccount, id)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Balance,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getAccountByUserId = `-- name: GetAccountByUserId :one
SELECT id, user_id, balance, created_at, updated_at FROM accounts
WHERE user_id = ? LIMIT 1
`

func (q *Queries) GetAccountByUserId(ctx context.Context, userID sql.NullInt32) (Account, error) {
	row := q.db.QueryRowContext(ctx, getAccountByUserId, userID)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Balance,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getAccounts = `-- name: GetAccounts :many
SELECT id, user_id, balance, created_at, updated_at FROM accounts
ORDER BY id
`

func (q *Queries) GetAccounts(ctx context.Context) ([]Account, error) {
	rows, err := q.db.QueryContext(ctx, getAccounts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Account
	for rows.Next() {
		var i Account
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Balance,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getLatestTransactionHistoryByAccountId = `-- name: GetLatestTransactionHistoryByAccountId :one
SELECT id, transaction_type, amount, user_id, account_id, timestamp, created_at, updated_at FROM transaction_history
WHERE account_id = ? ORDER BY timestamp DESC LIMIT 1
`

func (q *Queries) GetLatestTransactionHistoryByAccountId(ctx context.Context, accountID sql.NullInt32) (TransactionHistory, error) {
	row := q.db.QueryRowContext(ctx, getLatestTransactionHistoryByAccountId, accountID)
	var i TransactionHistory
	err := row.Scan(
		&i.ID,
		&i.TransactionType,
		&i.Amount,
		&i.UserID,
		&i.AccountID,
		&i.Timestamp,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getLatestTransactionHistoryByUserId = `-- name: GetLatestTransactionHistoryByUserId :one
SELECT id, transaction_type, amount, user_id, account_id, timestamp, created_at, updated_at FROM transaction_history
WHERE user_id = ? ORDER BY timestamp DESC LIMIT 1
`

func (q *Queries) GetLatestTransactionHistoryByUserId(ctx context.Context, userID sql.NullInt32) (TransactionHistory, error) {
	row := q.db.QueryRowContext(ctx, getLatestTransactionHistoryByUserId, userID)
	var i TransactionHistory
	err := row.Scan(
		&i.ID,
		&i.TransactionType,
		&i.Amount,
		&i.UserID,
		&i.AccountID,
		&i.Timestamp,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getTransactionHistories = `-- name: GetTransactionHistories :many
SELECT id, transaction_type, amount, user_id, account_id, timestamp, created_at, updated_at FROM transaction_history
ORDER BY id
`

func (q *Queries) GetTransactionHistories(ctx context.Context) ([]TransactionHistory, error) {
	rows, err := q.db.QueryContext(ctx, getTransactionHistories)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []TransactionHistory
	for rows.Next() {
		var i TransactionHistory
		if err := rows.Scan(
			&i.ID,
			&i.TransactionType,
			&i.Amount,
			&i.UserID,
			&i.AccountID,
			&i.Timestamp,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTransactionHistoriesByAccountId = `-- name: GetTransactionHistoriesByAccountId :many
SELECT id, transaction_type, amount, user_id, account_id, timestamp, created_at, updated_at FROM transaction_history
WHERE account_id = ?
`

func (q *Queries) GetTransactionHistoriesByAccountId(ctx context.Context, accountID sql.NullInt32) ([]TransactionHistory, error) {
	rows, err := q.db.QueryContext(ctx, getTransactionHistoriesByAccountId, accountID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []TransactionHistory
	for rows.Next() {
		var i TransactionHistory
		if err := rows.Scan(
			&i.ID,
			&i.TransactionType,
			&i.Amount,
			&i.UserID,
			&i.AccountID,
			&i.Timestamp,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTransactionHistoriesByUserId = `-- name: GetTransactionHistoriesByUserId :many
SELECT id, transaction_type, amount, user_id, account_id, timestamp, created_at, updated_at FROM transaction_history
WHERE user_id = ?
`

func (q *Queries) GetTransactionHistoriesByUserId(ctx context.Context, userID sql.NullInt32) ([]TransactionHistory, error) {
	rows, err := q.db.QueryContext(ctx, getTransactionHistoriesByUserId, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []TransactionHistory
	for rows.Next() {
		var i TransactionHistory
		if err := rows.Scan(
			&i.ID,
			&i.TransactionType,
			&i.Amount,
			&i.UserID,
			&i.AccountID,
			&i.Timestamp,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTransactionHistory = `-- name: GetTransactionHistory :one
SELECT id, transaction_type, amount, user_id, account_id, timestamp, created_at, updated_at FROM transaction_history
WHERE id = ? LIMIT 1
`

func (q *Queries) GetTransactionHistory(ctx context.Context, id int32) (TransactionHistory, error) {
	row := q.db.QueryRowContext(ctx, getTransactionHistory, id)
	var i TransactionHistory
	err := row.Scan(
		&i.ID,
		&i.TransactionType,
		&i.Amount,
		&i.UserID,
		&i.AccountID,
		&i.Timestamp,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUser = `-- name: GetUser :one
SELECT id, name, email, password, status, created_at, updated_at FROM users
WHERE id = ? LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, id int32) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Password,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUsers = `-- name: GetUsers :many
SELECT id, name, email, password, status, created_at, updated_at FROM users
ORDER BY id
`

func (q *Queries) GetUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, getUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Email,
			&i.Password,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAccountByUserId = `-- name: UpdateAccountByUserId :exec
UPDATE accounts SET 
    balance=?,updated_at=?
WHERE user_id=?
`

type UpdateAccountByUserIdParams struct {
	Balance   sql.NullInt64
	UpdatedAt sql.NullTime
	UserID    sql.NullInt32
}

func (q *Queries) UpdateAccountByUserId(ctx context.Context, arg UpdateAccountByUserIdParams) error {
	_, err := q.db.ExecContext(ctx, updateAccountByUserId, arg.Balance, arg.UpdatedAt, arg.UserID)
	return err
}

const updateTransactionHistoryByAccountId = `-- name: UpdateTransactionHistoryByAccountId :exec
UPDATE transaction_history SET 
    transaction_type=?,amount=?,user_id=?,account_id=?,timestamp=?,updated_at=?
WHERE account_id=?
`

type UpdateTransactionHistoryByAccountIdParams struct {
	TransactionType sql.NullString
	Amount          sql.NullInt64
	UserID          sql.NullInt32
	AccountID       sql.NullInt32
	Timestamp       sql.NullTime
	UpdatedAt       sql.NullTime
	AccountID_2     sql.NullInt32
}

func (q *Queries) UpdateTransactionHistoryByAccountId(ctx context.Context, arg UpdateTransactionHistoryByAccountIdParams) error {
	_, err := q.db.ExecContext(ctx, updateTransactionHistoryByAccountId,
		arg.TransactionType,
		arg.Amount,
		arg.UserID,
		arg.AccountID,
		arg.Timestamp,
		arg.UpdatedAt,
		arg.AccountID_2,
	)
	return err
}

const updateTransactionHistoryByUserId = `-- name: UpdateTransactionHistoryByUserId :exec
UPDATE transaction_history SET 
    transaction_type=?,amount=?,user_id=?,account_id=?,timestamp=?,updated_at=?
WHERE user_id=?
`

type UpdateTransactionHistoryByUserIdParams struct {
	TransactionType sql.NullString
	Amount          sql.NullInt64
	UserID          sql.NullInt32
	AccountID       sql.NullInt32
	Timestamp       sql.NullTime
	UpdatedAt       sql.NullTime
	UserID_2        sql.NullInt32
}

func (q *Queries) UpdateTransactionHistoryByUserId(ctx context.Context, arg UpdateTransactionHistoryByUserIdParams) error {
	_, err := q.db.ExecContext(ctx, updateTransactionHistoryByUserId,
		arg.TransactionType,
		arg.Amount,
		arg.UserID,
		arg.AccountID,
		arg.Timestamp,
		arg.UpdatedAt,
		arg.UserID_2,
	)
	return err
}

const updateUser = `-- name: UpdateUser :exec
UPDATE users SET 
    name=?,email=?,password=?,status=?,created_at=?,updated_at=?
WHERE id=?
`

type UpdateUserParams struct {
	Name      sql.NullString
	Email     sql.NullString
	Password  sql.NullString
	Status    sql.NullString
	CreatedAt sql.NullTime
	UpdatedAt sql.NullTime
	ID        int32
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) error {
	_, err := q.db.ExecContext(ctx, updateUser,
		arg.Name,
		arg.Email,
		arg.Password,
		arg.Status,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.ID,
	)
	return err
}
